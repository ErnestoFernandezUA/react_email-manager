{"version":3,"sources":["features/Server/serverSlice.ts","app/store.ts","pages/LoginPage/LoginPage.tsx","App.tsx","index.tsx"],"names":["getToServerAsync","createAsyncThunk","a","serverSlice","createSlice","name","initialState","storage","statusLoading","reducers","add","setStatusLoading","setError","extraReducers","builder","addCase","pending","state","fulfilled","rejected","actions","store","configureStore","reducer","server","serverReducer","LoginPage","App","path","element","root","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"ySAmBaA,EAAmBC,YAC9B,qBAD8C,sBAE9C,sBAAAC,EAAA,2FAKIC,EAAcC,YAAY,CAC9BC,KAAM,SACNC,aAdgC,CAChCC,QAAS,GACTC,cAAe,QAafC,SAAU,CACRC,IAAK,aAELC,iBAAkB,aAGlBC,SAAU,cAGZC,cAAe,SAACC,GACdA,EACGC,QAAQf,EAAiBgB,SAAS,SAACC,GAClCA,EAAMT,cAAgB,aAEvBO,QAAQf,EAAiBkB,WAAW,SAACD,GACpCA,EAAMT,cAAgB,UAEvBO,QAAQf,EAAiBmB,UAAU,SAACF,GACnCA,EAAMT,cAAgB,eAKfL,IAAf,QACO,EAIHA,EAAYiB,QCpDHC,GDgDN,EACLX,IADK,EAELC,iBAFK,EAGLC,SCnDmBU,YAAe,CAClCC,QAAS,CACPC,OAAQC,M,OCHCC,EAAqC,WAChD,OACE,mCACE,8CCAOC,G,MAAgB,WAC3B,OACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEO,KAAK,IACLC,QACE,cAAC,EAAD,cCVRC,EAAOC,SAASC,eAAe,QAErCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFL,K","file":"static/js/main.6aecfba9.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport {\n  createAsyncThunk,\n  createSlice,\n} from '@reduxjs/toolkit';\n// import { getPhotos } from '../../api/photo';\n// import { AppDispatch, RootState } from '../../app/store';\n// import { Photo } from '../../type/Photo';\n\nexport interface ServerState {\n  storage: any[];\n  statusLoading: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: ServerState = {\n  storage: [],\n  statusLoading: 'idle',\n};\n\nexport const getToServerAsync = createAsyncThunk(\n  'server/fetchPhotos',\n  async () => {\n\n  },\n);\n\nconst serverSlice = createSlice({\n  name: 'server',\n  initialState,\n  reducers: {\n    add: () => {\n    },\n    setStatusLoading: () => {\n\n    },\n    setError: () => {\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getToServerAsync.pending, (state) => {\n        state.statusLoading = 'loading';\n      })\n      .addCase(getToServerAsync.fulfilled, (state) => {\n        state.statusLoading = 'idle';\n      })\n      .addCase(getToServerAsync.rejected, (state) => {\n        state.statusLoading = 'failed';\n      });\n  },\n});\n\nexport default serverSlice.reducer;\nexport const {\n  add,\n  setStatusLoading,\n  setError,\n} = serverSlice.actions;\n\n// export const selectServerStorage = (state: RootState) => state.server.storage;\n// export const selectServerStatusLoading = (state: RootState) => state.server.statusLoading;\n// export const selectError = (state: RootState) => state.server.error;\n// export const selectRandomDelay = (state: RootState) => state.server.randomDelayLoading;\n\n// export const loadDataOnServer = (dispatch: AppDispatch) => {\n//   try {\n//     dispatch(getToServerAsync({page: 10, limit: 100}));\n//   } catch (error) {\n//     dispatch(setError(error));\n//   }\n// }\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\n\n// eslint-disable-next-line import/no-cycle\nimport serverReducer from '../features/Server/serverSlice';\n\nexport const store = configureStore({\n  reducer: {\n    server: serverReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n\n/* eslint-disable @typescript-eslint/indent */\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import React, { FunctionComponent } from 'react';\n\ntype Props = {};\n\nexport const LoginPage:FunctionComponent<Props> = () => {\n  return (\n    <>\n      <h1>LoginPage</h1>\n    </>\n  );\n};\n","import React from 'react';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\nimport { LoginPage } from './pages/LoginPage/LoginPage';\nimport './App.scss';\n\nexport const App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <Routes>\n          <Route\n            path=\"/\"\n            element={\n              <LoginPage />\n            }\n          />\n        </Routes>\n      </BrowserRouter>\n    </Provider>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nconst root = document.getElementById('root') as HTMLElement;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  root,\n);\n"],"sourceRoot":""}